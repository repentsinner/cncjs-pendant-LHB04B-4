#!/usr/bin/env node

import {Command} from 'commander';
import {SerialPort} from 'serialport';
import * as inquirer from 'inquirer';
// TODO: importing json is still experimental; using the old parser suppresses
// eslint failures and node warnings for now
// import * as pkg from "../package.json" with {type: "json"};
import {readFile} from 'node:fs/promises';
const fileUrl = new URL('../package.json', import.meta.url);
const pkg = JSON.parse(await readFile(fileUrl, 'utf8'));
import {serverMain} from '../index.js';
import * as hid from 'node-hid';

const program = new Command();

program
    .version(`${pkg.version}`)
    .usage('-s <secret> -p <port> [options]')
    .option('-l, --list', 'list available ports then exit')
    .option('-s, --secret <secret>',
        'the secret key stored in the ~/.cncrc file')
    .option('-p, --port <port>', 'path or name of serial port')
    .option('-b, --baudrate <baudrate>', 'baud rate (default: 115200)', 115200)
    .option(
        '--socket-address <address>',
        'socket address or hostname (default: localhost)',
        'localhost',
    )
    .option('--socket-port <port>', 'socket port (default: 8000)', 8000)
    .option(
        '--controller-type <type>',
        'controller type: Grbl|Smoothie|TinyG (default: Grbl)',
        'Grbl',
    )
    .option(
        '--access-token-lifetime <lifetime>',
        'access token lifetime in seconds or a time span string (default: 30d)',
        '30d',
    );

const options = program.parse().opts();

if (options.list) {
  const ports = await SerialPort.list();

  if (ports.length === 0) {
    console.log('No serial ports found.');
  } else {
    console.log('Available serial ports:');
    ports.forEach(function(port) {
      console.log(port.path);
    });
  }
}

const store = {
  controller: {
    state: {},
    settings: {},
  },
  sender: {
    status: {},
  },
};

const kbdevent = {
  l_control: 0,
  l_shift: 0,
  l_alt: 0,
  l_meta: 0,
  r_control: 0,
  r_shift: 0,
  r_alt: 0,
  r_meta: 0,
  key: 0, // Normal keys
  extra: 0, // Advanced Keys or Special Keys
  repeating: 0, // If it is repating a movement
  can_repeat: 1, // If can repeat
  move: 1, // Actually move size
  default_move: 1, // Alter by F1, F2, F3
};

const mpgevent = {
  mpg_ccw: 0,
  mpg_cw: 0,
  off_axis: 0,
  x_axis: 0,
  y_axis: 0,
  z_axis: 0,
  a_axis: 0,
  rate_002: 0,
  rate_005: 0,
  rate_010: 0,
  rate_030: 0,
  rate_060: 0,
  rate_100: 0,
  rate_lead: 0,
  button_01: 0,
  button_02: 0,
  repeating: 0,
  can_repeat: 1,
};

/**
 * Why does this pendant need to know about the controller protocol?
 * Can't CNCjs handle that?
 * @param {object} options dictionary of command-line options
 */
const createServer = function(options) {
  console.log('Creating xHB04B server with options:', options);
  serverMain(options, function(err, socket) {
    // Grbl
    socket.on('Grbl:state', function(state) {
      store.controller.state = state;
    });
    socket.on('Grbl:settings', function(settings) {
      store.controller.settings = settings;
    });

    // Smoothie
    socket.on('Smoothie:state', function(state) {
      store.controller.state = state;
    });
    socket.on('Smoothie:settings', function(settings) {
      store.controller.settings = settings;
    });

    // TinyG
    socket.on('TinyG:state', function(state) {
      store.controller.state = state;
    });
    socket.on('TinyG:settings', function(settings) {
      store.controller.settings = settings;
    });

    // Sender
    socket.on('sender:status', function(data) {
      store.sender.status = data;
    });

    const findPath = (vendorId, productId, deviceInterface) =>
      hid
          .devices()
          .find(
              (item) =>
                item.vendorId === vendorId &&
                item.productId === productId &&
                item.interface === deviceInterface,
          ).path;
    const mpg = new hid.HID(findPath(0x10ce, 0xeb93, 0));
    // const keyboardExtra = new hid.HID(findPath(0));

    /**
     * if this frame of data is the same as the last frame,
     * set the repeating flag? Only unset repeating if the data
     * returns to zero in the meantime?
     */
    mpg.on('data', function(data) {
      const recv = data.toJSON().data;
      mpgevent.button_01 = recv[2];
      mpgevent.button_02 = recv[3];

      mpgevent.off_axis = recv[5] === 6;
      mpgevent.x_axis = recv[5] === 17;
      mpgevent.y_axis = recv[5] === 18;
      mpgevent.z_axis = recv[5] === 19;
      mpgevent.a_axis = recv[5] === 20;

      mpgevent.rate_002 = recv[4] === 13;
      mpgevent.rate_005 = recv[4] === 14;
      mpgevent.rate_010 = recv[4] === 15;
      mpgevent.rate_030 = recv[4] === 16;
      mpgevent.rate_060 = recv[4] === 26;
      mpgevent.rate_100 = recv[4] === 27;
      mpgevent.rate_lead = recv[4] === 28;

      mpgevent.mpg_ccw = recv[6];
      mpgevent.mpg_cw = recv[6];
      console.log(mpgevent);
      //   kbdevent.l_control = (bits & 1) !== 0;
      //   kbdevent.l_shift = (bits & 2) !== 0;
      //   kbdevent.l_alt = (bits & 4) !== 0;
      //   kbdevent.l_meta = (bits & 8) !== 0;
      //   kbdevent.r_control = (bits & 16) !== 0;
      //   kbdevent.r_shift = (bits & 32) !== 0;
      //   kbdevent.r_alt = (bits & 64) !== 0;
      //   kbdevent.r_meta = (bits & 128) !== 0;
      //   recv.shift();
      //   kbdevent.key = recv.shift();
      //   kbdevent.repeating = 0;
      sendToController();
    });

    // keyboardExtra.on('data', function(data) {
    //   const recv = data.toJSON().data;
    //   recv.shift();
    //   kbdevent.extra = recv.shift();
    //   kbdevent.repeating = 0;
    //   sendToController();
    // });

    /**
     * Send to controller
     */
    function sendToController() {
      // Calculate move size modifiers
      kbdevent.move = kbdevent.default_move;
      if (kbdevent.l_alt || kbdevent.r_alt) {
        kbdevent.move = 0.1;
      } else if (
        kbdevent.l_shift ||
                kbdevent.r_shift ||
                kbdevent.r_meta
      ) {
        kbdevent.move = 10;
      }

      // Process pressed key
      switch (kbdevent.extra) {
        case 234: // vol+
          socket.emit(
              'write',
              options.port,
              'G91 Z-' + kbdevent.move + ';\n',
          );
          break;
        case 233: // vol-
          socket.emit(
              'write',
              options.port,
              'G91 Z' + kbdevent.move + ';\n',
          );
          break;
        case 131: // Media: Play (Top corner left)
          socket.emit('write', options.port, 'G10 L20 P1 X0;\n');
          break;
        case 138: // E-mail (Top corner left)
          socket.emit('write', options.port, 'G10 L20 P1 Y0;\n');
          break;
        case 226: // Mute (Top corner left)
          socket.emit('write', options.port, 'G10 L20 P1 Z0;\n');
          break;
        case 1: // Mouse Left (Top corner left)
          socket.emit(
              'write',
              options.port,
              'G10 L20 P1 X0 Y0 Z0;\n',
          );
          break;
        case 148: // Key: Home -> Goto Zero-working position
          socket.emit('write', options.port, 'G90 X0 Y0 Z0;\n');
          break;
        default:
          break;
      }
      switch (kbdevent.key) {
        case 80: // arrow: left
          socket.emit(
              'write',
              options.port,
              'G91 X-' + kbdevent.move + ';\n',
          );
          break;
        case 79: // arrow: right
          socket.emit(
              'write',
              options.port,
              'G91 X' + kbdevent.move + ';\n',
          );
          break;
        case 82: // arrow: up
          socket.emit(
              'write',
              options.port,
              'G91 Y' + kbdevent.move + ';\n',
          );
          break;
        case 81: // arrow: down
          socket.emit(
              'write',
              options.port,
              'G91 Y-' + kbdevent.move + ';\n',
          );
          break;
        case 58: // key: F1
          kbdevent.default_move = 0.1;
          break;
        case 59: // key: F2
          kbdevent.default_move = 1;
          break;
        case 60: // key: F3
          kbdevent.default_move = 10;
          break;
        case 40: // Key: OK or Enter
          kbdevent.can_repeat = kbdevent.can_repeat ? 0 : 1;
        default:
          break;
      }

      if (
        (kbdevent.extra || kbdevent.key) &&
                kbdevent.can_repeat &&
                // Key: Enter / OK -- change repeat function
                kbdevent.key != 40 &&
                // Special Key: Home -- goto Zero-working position
                kbdevent.extra != 148
      ) {
        if (!kbdevent.repeating) {
          kbdevent.repeating = 1;
          setTimeout(sendToController, 1000);
        } else {
          setTimeout(sendToController, 150);
        }
      } else {
        kbdevent.repeating = 0;
      }

      // console.log(kbdevent);
    }
  });
};

// console.log('List of connected devices (paths): ');
// console.log('devices:', hid.devices());

if (options.port) {
  createServer(options);
  // return;
}

SerialPort.list(function(err, ports) {
  if (err) {
    console.error(err);
    process.exit(1);
  }
  const choices = ports.map(function(port) {
    return port.comName;
  });

  inquirer
      .prompt([
        {
          type: 'list',
          name: 'port',
          message: 'Specify which port you want to use?',
          choices: choices,
        },
      ])
      .then(function(answers) {
        options.port = answers.port;

        createServer(options);
      });
});
